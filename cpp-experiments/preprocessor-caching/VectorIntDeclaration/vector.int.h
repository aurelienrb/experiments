// contains a minimal declaration for std::vector<int> as it is generated by VC++ 2015
// the implementation is expected to be found somewhere in a cpp file, like this:
//   namespace std {
//     template class vector<int>;
//   }
namespace std{
	template<typename>
	class allocator;

	template<class _Ty, class _Alloc = allocator<_Ty>>
	class vector;

	template<>
	class vector<int, allocator<int>> /*: public _Vector_alloc_int*/ {
	public:
		vector()noexcept;
		vector(const vector&);
		vector(vector&&);

		~vector()noexcept;

		size_t size()const noexcept;
		bool empty()const noexcept;
		const int & at(size_t _Pos)const;

		template<class... _Valty> void emplace_back(_Valty&&...);

	private:
#ifdef _DEBUG
		int * _data[4];
#else
		int * _data[3];
#endif
/*
		struct { //_Compressed_pair<int>
			struct { //std::allocator<int>
			} _1;
			struct { //_Vector_val<int>
				int * _Myfirst;
				int * _Mylast;
				int * _Myend;
			} _2;
		} _1;
*/
	};


/*
	struct _Container_base0 {
	};
	typedef _Container_base0 _Container_base;

	// std::_Simple_types<int>
	template<class _Val_types> class _Vector_val : public _Container_base {
	public:
		//typedef typename _Val_types::pointer pointer;
		typedef int * pointer;
		pointer _Myfirst;
		pointer _Mylast;
		pointer _Myend;
	};
*/
/*
	class _Vector_val {
	public:
		int * _Myfirst;
		int * _Mylast;
		int * _Myend;
	};
*/

/*
template<class _Alloc_types> class _Vector_alloc {
	//typedef typename _Alloc_types::_Alty _Alty;
	typedef std::_Wrap_alloc<std::allocator<int>> _Alty;
	//typedef typename _Alloc_types::_Val_types _Val_types;
	typedef std::_Simple_types<int> _Val_types;

private:
	_Compressed_pair<_Alty, _Vector_val<_Val_types>>_Mypair;
};
*/

/*template<class _Alloc_types> class _Vector_alloc {
private:
	_Compressed_pair _Mypair;
};*/

/*
	class _Compressed_pair_int final {
	private:
		struct {} _1; //std::allocator<int>
		struct {
			int * _Myfirst;
			int * _Mylast;
			int * _Myend;
		} _2; //_Vector_val _Myval2;
	};
*/
/*
	class _Vector_alloc_int {
	private:
		//_Compressed_pair<int>
		struct {
			//std::allocator<int>
			struct {
			} _1;
			//_Vector_val<int>
			struct {
				int * _Myfirst;
				int * _Mylast;
				int * _Myend;
			} _2;
		} _1;
	};
*/
//template<class _Ty, class _Alloc0> struct _Vec_base_types;
} // std
